verbosity = 1;

int Membrane = 7; // Choix de la membrane (1 à 6)
int Anneau = 1; // Choix de l'anneau (1 à 2)

include "data_memb.edp"; // Include the data file for the membrane parameters

real rglob = 10.3e-2/2;
real epais = 7.43e-3;
real larg;

if (Anneau == 1) {
	larg = 3e-3;
}
else if (Anneau == 2) {
	larg = 1.291e-2;
}

real rtot = rglob-larg;
func real adim (real dim){
	return dim/rtot; // Adimensionnement des dimensions
}
real llst = adim(1e-3); // structure aspect ratio
int Nst = 30; // number of elements for structure

real mup = 1e3; // stiffness for blocking variation in y for structure
int nev = 40; // number of eigenvalues

real tau = rtot/sqrt(Tm/mu);

cout << "tau = " << tau << endl;

int sttop = 1, stbot = 2, stleft = 3, stright = 4;

border bo1(t=0,1){x = t; y = -llst; label = stbot;};
border bo2(t=0,llst){x = 1; y = t-llst; label = stright;};
border bo3(t=0,1){x = 1-t; y = 0; label = sttop;};
border bo4(t=0,llst){x = 0; y = -t; label = stleft;};

mesh Shstcomp,Shst;
Shstcomp = buildmesh( bo1(Nst) + bo2(1) + bo3(Nst) + bo4(1), fixedborder = true);
Shst = emptymesh(Shstcomp);
plot(Shst,wait = 1);

fespace Vhst(Shst,P2,periodic = [[stbot,x],[sttop,x]]);
Vhst<complex> zu, zt;

varf stiffst(zu, zt) = // Matrice de raideur
	int2d(Shst)(dx(zu) * dx(zt) * x)
	+ on(stright, zu = 0)
	+ int2d(Shst)(dy(zu) * dy(zt) * mup * x);

varf massst(zu, zt) = // Matrice de masse
	int2d(Shst)(zu * zt * x);

matrix<complex> Ast = stiffst(Vhst, Vhst);
matrix<complex> Bst = massst(Vhst, Vhst);
complex[int, int] Cst(Ast.n, Ast.n);
Cst = 0;

set(Ast, solver = sparsesolver);
set(Bst, solver = sparsesolver);

// complex[int] evst(nev);
// Vhst<complex>[int] eVst(nev);

// EigenValue(Ast, Bst, value = evst, vector = eVst, tol = 1e-30, maxit = 0, ncv = 0, driver = 2); // Modes propres de la membrane

Vhst[int] vhst(2);

vhst[0] = x;
vhst[1] = y;

cout << "# nodes" << endl;
cout << Vhst.ndof << endl;

int k = 0;

ofstream filemode("modes_memb.dat");

// for (int ni = 0; ni < nev; ni++) {
// 	cout << "omega_m" << ni+1 << " = " << sqrt(real(evst[ni]))/tau << endl;
// 	cout << "f_m" << ni+1 << " = " << sqrt(real(evst[ni]))/(tau*2*pi) << " Hz" << endl;
// 	Vhst<complex> zsol = eVst[ni];
// 	Vhst<real> zsolr = real(zsol);
// 	plot(zsolr, wait = 1, value=1, dim = 3, cmm="M mode "+(ni+1)+"= "+sqrt(real(evst[ni]))/(tau*2*pi), fill = 1, ps="zsol_mode"+(ni+1)+".eps");
// 	k += 1;
// 	if(k<4){
// 		ofstream foutdat("zsolr_mode"+k+".dat");
// 		for (int i = 0; i < Vhst.ndof; ++i) {
// 			foutdat << vhst[0][][i] << " " << zsolr[][i] << endl;
// 		}
// 		cout << "zsolr_mode" << k << ".dat written" << endl;
// 	}
// }

matrix<complex> Ide = eye(Ast.n);
matrix<complex> nIde = -Ide;
matrix<complex> OIde = 1e-9*Ide;

matrix<complex> M1st = [[Ide, 0], [0, Bst]]; // Manually construct block diagonal matrix
matrix<complex> M2st = [[OIde, nIde], [Ast, OIde]]; // Ensure proper block matrix construction
cout << M1st.n << " " << M1st.m << endl;
cout << M2st.n << " " << M2st.m << endl;

set(M1st, solver = "petsc", sparams = "-ksp_type gmres -pc_type ilu");
set(M2st, solver = "petsc", sparams = "-ksp_type gmres -pc_type ilu");

complex[int] evst(nev); // to store the nev eigenvalue
complex[int, int] eVst(M1st.n, nev); // to store the eigenvectors

EigenValue(M2st, M1st, value = evst, rawvector = eVst, tol = 1e-30, ncv = 0, driver = 2);

for (int ni = 0; ni < nev; ni++) {
	if (real(1i*evst[ni]) > 0) {
		cout << "omega_m " << ni+1 << " = " << real(1i*evst[ni])/tau << endl;
		cout << "f_m " << ni+1 << " = " << real(1i*evst[ni])/(tau*2*pi) << endl;
		filemode << ni+1 << " " << real(1i*evst[ni])/(tau*2*pi) << " " << real(evst[ni])/(tau*2*pi) << endl;

		Vhst<complex> ztot;

		ztot[] = eVst(0:Ast.n, ni);

		Vhst<real> ztotreal = real(ztot);

		plot(ztotreal, wait = 1, dim = 3, cmm="M mode CHP st "+(ni+1)+" = "+evst[ni]/(tau*2*pi), fill = 1, value = 1);

	}
}


