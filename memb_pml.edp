verbosity = 1;

int Membrane = 1; // Choix de la membrane (1 à 6)

include "data_memb.edp"; // Include the data file for the membrane parameters
include "data_hp.edp"; // Include the data file for the speaker parameters

real rtot = 4.65e-2; // Rayon total du cylindre
real llst = 1e-2; // structure aspect ratio
int Nst = 40; // number of elements for structure
real lpml = 0.5; // PML aspect ratio
real epml = 0.5; // écart entre le PML et le bord de la cavité
real lspl = 1/rtot; // distance mesure de SPL

int Nac = 20; // number of elements for acoustics

real mueps = 1e-6;
real mup = 1e3; // stiffness for blocking variation in y for structure
int nev = 100; // number of eigenvalues

real c0 = 343.0; // Vitesse du son dans l'air
real rho = 1.225; // Masse volumique de l'air


real tau = rtot/sqrt(Tm/mu);

cout << "tau = " << tau << endl;

real Gamma = (c0^2 * mu) / Tm;
real beta = (rho*rtot)/mu;


int sttop = 1, stbot = 2, stleft = 3, stright = 4, pmlext = 16, pmlint = 17, center = 18, centerpml = 19, kirchoff1=20, kirchoff2=21, kirchoff3=22;

border bo1(t=0,1){x = t; y = 0; label = stbot;};
border bo2(t=0,llst){x = 1; y = t; label = stright;};
border bo3(t=0,1){x = 1-t; y = llst; label = sttop;};
border bo4(t=0,llst){x = 0; y = llst-t; label = stleft;};

real phi0 = 400; // PML attenuation parameter

// ----------------PML functions------------------
func real yint(real y){
	if(y>llst+epml){
		return llst;
	}
	else if(y<=llst+epml && y>-epml){
		return y;
	}
	else if(y<=-epml){
		return 0;
	}
}
func sigx = phi0 * (x-(1+epml))^2;
func sigy = phi0 * (abs(y-yint(y)) - epml)^2;

func rtilde =  (x>(1+epml))? (x - 1i*phi0*(x - (1+epml))^3/3 ) :x;

func Gammax = x>(1+epml)? (1 - 1i*sigx) :1.0;
func Gammay = (abs(y-yint(y))>epml)? (1 - 1i*sigy) :1.0;

// ----------------  mesh  ------------------

//PML borders
border bo101(t=0,1){x = 0; y = -epml*t; label = center;}; // Axe inférieur
border bo102(t=0,1){x = 0; y = -epml-lpml*t; label = centerpml;}; // Axe PML inférieur
border bo103(t=0,1){x = (1+epml+lpml)*t; y = -epml-lpml; label = pmlext;}; // PML extérieur inférieur
border bo104(t=0,1){x = (1+epml+lpml); y = -epml-lpml+(2*lpml+llst+2*epml)*t; label = pmlext;}; // PML extérieur latéral
border bo105(t=0,1){x = (1+epml+lpml)*(1-t); y = epml+lpml+llst; label = pmlext;}; // PML extérieur supérieur
border bo106(t=0,1){x = 0; y = epml+lpml+llst-t*(lpml); label = centerpml;}; // Axe PML supérieur
border bo107(t=0,1){x = 0; y = epml+llst-t*epml; label = center;}; // Axe supérieur
border bo108(t=0,1){x = (1+epml)*t; y = -epml; label = pmlint;}; // PML intérieur inférieur
border bo109(t=0,1){x = (1+epml); y = -epml+(llst+2*epml)*t; label = pmlint;}; // PML intérieur latéral
border bo110(t=0,1){x = (1+epml)*(1-t); y = epml+llst; label = pmlint;}; // PML intérieur supérieur


mesh Shstcomp,Shst;
Shstcomp = buildmesh( bo1(Nst) + bo2(1) + bo3(Nst) + bo4(1), fixedborder = true);
Shst = emptymesh(Shstcomp);
plot(Shst,wait = 1);

mesh Shext;
Shext = buildmesh( bo101(Nac) + bo102(Nac) + bo103(2*Nac) + bo104(3*Nac) + bo105(2*Nac) + bo106(Nac) + bo107(Nac) + bo108(2*Nac) + bo109(3*Nac) + bo110(2*Nac)
+bo1(-Nst)+bo2(-1)+bo3(-Nst), fixedborder = true);
mesh Sh = Shst + Shext;
plot(Sh, wait = 1);

//---------------------------  PML  -----------------------------
fespace Vhext(Shext, P2);
Vhext<complex> VGammax = Gammax;
Vhext VGammaxr = real(VGammax);
Vhext VGammaxi = imag(VGammax);
Vhext<complex> VGammay = Gammay;
Vhext VGammayr = real(VGammay);
Vhext VGammayi = imag(VGammay);
Vhext<complex> Vrtildep = rtilde;
Vhext Vrtildepr = real(Vrtildep);
Vhext Vrtildepi = imag(Vrtildep);

plot(VGammaxi, wait =1, fill = 1,dim = 3,value = 1);
plot(VGammayi, wait =1, fill = 1,dim = 3,value = 1);
plot(Vrtildepi, wait =1, fill = 1,dim = 3,value = 1);

//--------------------------- structural modes -----------------------------

fespace Vhst(Shst,P2,periodic = [[stbot,x],[sttop,x]]);
Vhst<complex> zu, zt;

varf stiffst(zu, zt) = // Matrice de raideur
	int2d(Shst)(dx(zu) * dx(zt) * x)
	+ on(stright, zu = 0)
	+ int2d(Shst)(dy(zu) * dy(zt) * mup * x);

varf massst(zu, zt) = // Matrice de masse
	int2d(Shst)(zu * zt * x);

matrix<complex> Ast = stiffst(Vhst, Vhst);
matrix<complex> Bst = massst(Vhst, Vhst);

// ------------------------------  ajout extérieur ------------------------------

Vhext<complex> puext, ptext;

varf stiffext(puext, ptext) =
	int2d(Shext)(rtilde*Gamma* ((Gammay/Gammax)*dx(puext) * dx(ptext) + (Gammax/Gammay)*dy(puext) * dy(ptext)) * x)
	+ int2d(Shext)(puext * ptext * mueps);

varf massext(puext, ptext) =
	int2d(Shext)(rtilde*Gammax*Gammay*puext * ptext * x);

varf va21ext(puext, zt) = int1d(Shext, sttop)(x * puext * zt) - int1d(Shext, stbot)(x * puext * zt);

varf vb12ext(zu, ptext) = -int1d(Shext, sttop)(x * zu * ptext * beta * Gamma) + int1d(Shext, stbot)(x * zu * ptext * beta * Gamma);

matrix<complex> Aext = stiffext(Vhext, Vhext);
matrix<complex> Bext = massext(Vhext, Vhext);

matrix<complex> A21ext = va21ext(Vhext, Vhst);

matrix<complex> B12ext = vb12ext(Vhst, Vhext);

matrix<complex> AtotBext = [[Ast, A21ext], [0, Aext]];
matrix<complex> BtotBext = [[Bst, 0], [B12ext, Bext]];

cout << AtotBext.n << " " << AtotBext.m << endl;
cout << BtotBext.n << " " << BtotBext.m << endl;

set(AtotBext, solver = sparsesolver);
set(BtotBext, solver = sparsesolver);

complex[int] evst(nev);
complex[int, int] eVst(AtotBext.n, nev);

EigenValue(AtotBext, BtotBext, value = evst, rawvector = eVst, tol = 1e-30, ncv = 0, driver = 2);

for (int ni = 0; ni < nev; ni++) {
	if (real(evst[ni]) > 0){
		cout << "omega_m" << ni+1 << " = " << sqrt(real(evst[ni]))/tau << endl;
		cout << "f_m" << ni+1 << " = " << sqrt(real(evst[ni]))/(tau*2*pi) << endl;
		Vhext<complex> ptotext;
		Vhst<complex> ztot;

		ztot[] = eVst(0:Ast.n-1, ni); // Extract the first part of the eigenvector for z
		ptotext[] = eVst(Ast.n:AtotBext.n-1, ni); // Extract the second part of the eigenvector for p	

		Vhext<real> ptotextreal = real(ptotext);
		Vhst<real> ztotreal = real(ztot);
		plot(ztotreal, wait = 1, value=1, dim = 3, cmm="M mode "+(ni+1)+ " " +sqrt(real(evst[ni]))/(tau*2*pi), fill = 1);
		plot(ptotextreal, wait = 1, value=1, dim = 2, cmm="A mode "+(ni+1)+ " " +sqrt(real(evst[ni]))/(tau*2*pi), fill = 1);
	}
}
