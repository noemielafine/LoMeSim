verbosity = 1;

int Membrane = 1; // Choix de la membrane (1 à 6)

include "data_hp.edp"; // Include the data file for the speaker parameters
include "data_memb.edp"; // Include the data file for the membrane parameters

// Paramètres physiques
real h = 11.7e-2; // Hauteur du cylindre 
real rtot = 4.65e-2; // Rayon total du cylindre
real rho = 1.225; // Masse volumique de l'air
real c0 = 343.0; // Vitesse du son dans l'air
real U0 = 1; // Tension électrique

real rtotad = rtot/rd; // Rayon du piston adimensionné

real mup = 1e3; // stiffness for blocking variation in y for structure

real llac = h/rd; // cavity aspect ratio
real llst = 1e-2; // structure aspect ratio
real eps = 1e-2; // small dimension for imposing P=0.

int Nac = 30; // number of elements for acoustics
int Nst = 45; // number of elements for structure

int nev = 10; //nombre de fréquences propres à calculer - convergence

real mueps = 1e-6;
real tau = sqrt(M0/K0);

cout << "tau = " << tau << endl;

real gammaa = (M0*c0^2)/(K0*rd^2);
real gammam = (M0*Tm)/(K0*rd^2*mu);
real betap = (rho*rd)/mu;
real beta0 = (mu*rd^2)/M0;
real U0ad=(U0*tau)/(Bl*rd);

// ----------------  mesh  ------------------

// labels
int sttop = 1, stbot = 2, stleft = 3, stright = 4, cavleft1 = 5, bobtop = 6, bobright =7, bobbot = 8, cavleft2 = 9, cavtop1 = 10, cavtop2 = 11, piston = 12, cavright = 13, cavbot = 14, edge = 15;

// mesh for structure
border bo1(t=0,rtotad){x = t; y = -llst; label = stbot;};
border bo2(t=0,llst){x = rtotad; y = t-llst; label = stright;};
border bo3(t=0,rtotad){x = rtotad-t; y = 0; label = sttop;};
border bo4(t=0,llst){x = 0; y = -t; label = stleft;};

mesh Shstcomp,Shst;
Shstcomp = buildmesh( bo1(Nst) + bo2(1) + bo3(Nst) + bo4(1), fixedborder = true);
Shst = emptymesh(Shstcomp);
plot(Shst,wait = 0);


// mesh for acoustics
border bo5(t=0,rtotad){x = t; y = 0; label = cavbot;}; // Bas de la cavité
border bo6(t=0,llac){x = rtotad; y = t; label = cavright;}; // Droite de la cavité
border bo71(t=0,1){x = (1-rtotad)*t+rtotad; y = llac; label = cavtop1;}; // Partie supérieure 1
border bo72(t=0,1){x = 1-rdconead*t; y = llac-depthad*t; label = piston;}; // Partie supérieure 2
border bo73(t=0,1){x = (1-rdconead)*(1-t); y = llac-depthad; label = cavtop2;}; // Partie supérieure 3
border bo81(t=0,ebpad){x = 0; y = llac-depthad-t; label = cavleft1;}; // Gauche de la cavité (partie 1)
border bo82(t=0,rbad){x = t; y = llac-depthad-ebpad; label = bobtop;}; // Haut de la bobine
border bo83(t=0,hbad){x = rbad; y = llac-depthad-ebpad-t; label = bobright;}; // Droite de la bobine
border bo84(t=0,rbad){x = rbad-t; y = llac-depthad-ebpad-hbad; label = bobbot;}; // Bas de la bobine
border bo85(t=0,1){x = 0; y = (llac-depthad-ebpad-hbad)*(1-t); label = cavleft2;}; // Gauche de la cavité (partie 2)

// border bo91(t=0,pi/2){x = (1-rdconead)*cos(t); y = llac-depthad+depthad*cos(t); label = edge;}; // Bout du HP
border bo91(t=0,1) 
{
    real a = (1 - rdconead); // Taille en x
    real b = depthad;        // Taille en y
    real k = 3;              // Facteur exponentiel (ajustable)
    x = a * (1 - t^2); 
    y = llac - depthad + b * t; 
    label = edge;
};

border bo92(t=0,1){x = 0; y = llac-depthad*t; label = edge;}; // Partie supérieure 4
border bo93(t=0,1){x = (1-rdconead)*t; y = llac-depthad; label = edge;};

mesh Shedge;
Shedge = buildmesh(bo91(1) + bo92(1) + bo93(1), fixedborder = true);
plot(Shedge, wait = 0);

mesh Shac;
Shac = buildmesh(bo5(Nac) + bo6(3*Nac) + bo71(Nac) + bo72(Nac) + bo73(Nac) + bo81(Nac) + bo82(Nac) + bo83(Nac) + bo84(Nac) + bo85(2*Nac), fixedborder = true);
plot(Shac, wait = 0);

// full mesh (for display only)
mesh Shtot = Shst + Shac + Shedge;
plot(Shtot, wait = 0);

//--------------------------- structural modes -----------------------------

fespace Vhst(Shst,P1,periodic = [[stbot,x],[sttop,x]]);
Vhst<complex> zu, zt;

varf stiffst(zu, zt) = // Matrice de raideur
	int2d(Shst)(gammam * dx(zu) * dx(zt) * x)
	+ on(stright, zu = 0)
	+ int2d(Shst)(dy(zu) * dy(zt) * mup * x);

varf massst(zu, zt) = // Matrice de masse
	int2d(Shst)(zu * zt * x);

matrix<complex> Ast = stiffst(Vhst, Vhst);
matrix<complex> Bst = massst(Vhst, Vhst);

set(Ast, solver = sparsesolver);
set(Bst, solver = sparsesolver);

complex[int] evst(nev);
Vhst<complex>[int] eVst(nev);

EigenValue(Ast, Bst, value = evst, vector = eVst, tol = 1e-18, maxit = 0, ncv = 0, driver = 2);

// for (int ni = 0; ni < nev; ni++) {
// 	cout << "omega_m" << ni+1 << " = " << sqrt(real(evst[ni]))/tau << endl;
// 	cout << "f_m" << ni+1 << " = " << sqrt(real(evst[ni]))/(tau*2*pi) << endl;
// 	Vhst<complex> zsol = eVst[ni];
// 	Vhst<real> zsolr = real(zsol);
// 	plot(zsolr, wait = 0, dim = 3, cmm="M mode "+(ni+1)+sqrt(real(evst[ni]))/(tau*2*pi), fill = 1);
// }

// ----------------------------  acoustic modes  ---------------------------------

fespace Vhac(Shac, P1);
Vhac<complex> pu, pt;

varf stiffac(pu, pt) =
	int2d(Shac)(gammaa * (dx(pu) * dx(pt) + dy(pu) * dy(pt)) * x)
	+ int2d(Shac)(pu * pt * mueps);

varf massac(pu, pt) =
	int2d(Shac)(pu * pt * x);

matrix<complex> Aac = stiffac(Vhac, Vhac);
matrix<complex> Bac = massac(Vhac, Vhac);

set(Aac, solver = sparsesolver);
set(Bac, solver = sparsesolver);

complex[int] evac(nev);
Vhac<complex>[int] eVac(nev);

EigenValue(Aac, Bac, value = evac, vector = eVac, tol = 1e-30, ncv = 0, driver = 2);

// for (int ni = 0; ni < nev; ni++) {
// 	cout << "omega_ac" << ni+1 << " = " << sqrt(real(evac[ni]))/tau << endl;
// 	cout << "f_ac" << ni+1 << " = " << sqrt(real(evac[ni]))/(tau*2*pi) << endl;
// 	Vhac<complex> psolac = eVac[ni];
// 	Vhac<real> psolrac = real(psolac);
// 	plot(psolrac, wait = 0, dim = 2, cmm="A mode "+(ni+1)+" = "+sqrt(real(evac[ni]))/(tau*2*pi), fill = 1);
// }

// ------------------------------  coupled modes  ---------------------------

varf va12(zu, pt) = int1d(Shac, cavbot)(x * zu * pt * 0.0);
varf va21(pu, zt) = int1d(Shst, sttop)(x * pu * zt);

varf vb12(zu, pt) = -int1d(Shac, cavbot)(x * zu * pt * betap * gammaa);
varf vb21(pu, zt) = int1d(Shst, sttop)(x * pu * zt * 0.0);

matrix<complex> A12 = va12(Vhst, Vhac);
matrix<complex> A21 = va21(Vhac, Vhst);

matrix<complex> B12 = vb12(Vhst, Vhac);
matrix<complex> B21 = vb21(Vhac, Vhst);

matrix<complex> Atot = [[Aac, A12], [A21, Ast]];
matrix<complex> Btot = [[Bac, B12], [B21, Bst]];

set(Atot, solver = sparsesolver);
set(Btot, solver = sparsesolver);

complex[int] evtot(nev); // to store the nev eigenvalue
complex[int, int] eVtot(Atot.n, nev); // to store the eigenvectors

EigenValue(Atot, Btot, value = evtot, rawvector = eVtot, tol = 1e-30, ncv = 0, driver = 2);

//  ---------------------  plot modes couplés  --------------------------

// for (int ni = 0; ni < nev; ni++) {
// 	cout << "omega_m_ac " << ni+1 << " = " << sqrt(real(evtot[ni]))/tau << endl;
// 	cout << "f_m_ac " << ni+1 << " = " << sqrt(real(evtot[ni]))/(tau*2*pi) << endl;
// 	Vhac<complex> ptot;
// 	Vhst<complex> ztot;

// 	complex[int] Pvec(Aac.n);
// 	complex[int] zvec(Ast.n);

// 	[Pvec, zvec] = eVtot(:, ni);

// 	ptot[] = Pvec;
// 	ztot[] = zvec;

// 	Vhac<real> ptotreal = real(ptot);
// 	Vhst<real> ztotreal = real(ztot);

// 	plot(ztotreal, wait = 0, dim = 3, cmm="M mode C "+(ni+1)+" = "+sqrt(real(evtot[ni]))/(tau*2*pi), fill = 1, value = 1);
// 	plot(ptotreal, wait = 0, dim = 2, cmm="A mode C "+(ni+1)+" = "+sqrt(real(evtot[ni]))/(tau*2*pi), fill = 1, value = 1);
// }

//-----------------------------Ajout du haut-parleur---------------------------

varf vaB1(pu, pt) = int1d(Shac, piston)(x * pt * gammaa * betap);
varf vaB2(pu, pt) = int1d(Shac, piston)(x * pt * beta0);

complex[int] B1 = vaB1(0, Vhac);
complex[int] B2 = vaB2(0, Vhac);

complex[int, int] Zac(Aac.n, Aac.m);
Zac=0;
complex[int, int] Z12(A12.n, A12.m);
Z12=0;
complex[int, int] Z21(A21.n, A21.m);
Z21=0;
complex[int, int] Zst(Ast.n, Ast.m);
Zst=0;

matrix<complex> AtotB = [[Aac, A12, 0, 0], [A21, Ast, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]];
matrix<complex> BtotB = [[Bac, B12, B1, 0], [B21, Bst, 0, 0], [B2', 0, 1, 0], [0, 0, 0, (L*K0)/(Bl^2)]];
matrix<complex> CtotB = [[Zac, Z12, 0, 0], [Z21, Zst, 0, 0], [0, 0, B0/sqrt(K0*M0), -1], [0, 0, 1, (R*sqrt(K0*M0))/(Bl^2)]];

cout << AtotB.n << " " << AtotB.m << endl;
cout << BtotB.n << " " << BtotB.m << endl;
cout << CtotB.n << " " << CtotB.m << endl;

complex[int] Phi(AtotB.n);
Phi = 0;
Phi(AtotB.n-1) = U0ad;

int nFrames = 1000; // Nombre de pas de fréquence
real domega = 2*pi; // Intervalle de fréquence

real[int] fValues(nFrames), pValues(nFrames), impValues(nFrames), zValues(nFrames), wValues(nFrames), phasew(nFrames), phasez(nFrames), dphase(nFrames); // Vecteurs pour stocker les valeurs de fréquence et de pression

func real log10(real k) {
    return log(k) / log(10.0); // Fonction logarithme base 10
}

// for(int frame = 0; frame < nFrames; ++frame) {
// 	real omega = frame * domega; // Mise à jour de la fréquence
// 	real Omega = omega*tau;
// 	fValues[frame] = omega/(2*pi); // Stockage de la fréquence
// 	matrix<complex> MtotB = -(Omega^2)*BtotB + AtotB + 1i*Omega*CtotB;

// 	set(MtotB, solver = sparsesolver);

// 	complex[int] SolB = MtotB^-1 * Phi;

// 	complex Q = SolB(AtotB.n-1);
// 	complex W = SolB(AtotB.n-2)*rd;

// 	impValues[frame] = ((Bl^2)/sqrt(K0*M0))*abs(U0ad/(1i*Omega*Q)); // Calcul de l'impédance acoustique
// 	pu[]=SolB(0:Aac.n-1);
// 	zu[]=SolB(Aac.n:Aac.n+Ast.n-1);
// 	Vhac<real> pureal = real(pu);
// 	Vhst<real> zureal = real(zu);


// 	real maxvalue = (pureal[].max*K0*mu*rd)/M0; // Valeur maximale de la pression
//     pValues[frame] = 20*log10(maxvalue/(20*1e-6)); // Calcul du niveau de pression acoustique en dB
// 	wValues[frame] = abs(real(W)/U0); // Stockage du module du déplacement du haut-parleur
// 	zValues[frame] = abs((zureal(0,0)*rd)/U0); // Stockage du module du déplacement de la membrane

// 	phasew[frame] = arg(W/U0); // Calcul de la phase
// 	phasez[frame] = arg(zu(0,0)*rd/U0); // Calcul de la phase
// 	dphase[frame] = phasew[frame] - phasez[frame]; // Calcul de la différence de phase

// 	cout << fValues[frame] << " " << pValues[frame] << " " << impValues[frame] << " " << real(W) << endl; // Affichage des valeurs de fréquence et de pression
// 	plot(pureal, fill=1, dim=2, wait = 0, value=1, cmm="Pression acoustique a la frequence "+omega/(2*pi)+ " Hz");
// 	plot(zureal, fill=1, dim=3, wait = 0, value=1, cmm="Deplacement de la membrane a la frequence "+omega/(2*pi)+" Hz");
// }	

// ofstream file("pressure_frequence_withmemb_v4.dat"); // Ouverture du fichier de sortie
// for (int i = 0; i < nFrames; ++i) {
//     file << fValues[i] << " " << pValues[i] << endl; // Écriture des valeurs de fréquence et de pression dans le fichier
// }

// ofstream fileimp("impedance_frequence_withmemb_v4.dat"); 
// for (int i = 0; i < nFrames; ++i) {
//     fileimp << fValues[i] << " " << impValues[i] << endl; // Écriture des valeurs de fréquence et d'impédance dans le fichier
// }

// ofstream filex("x_frequence_withmemb_v4.dat"); 
// for (int i = 0; i < nFrames; ++i) {
// 	filex << fValues[i] << " " << wValues[i] << endl; // Écriture des valeurs de fréquence et de déplacement du piston dans le fichier
// }

// ofstream filez("z_frequence_withmemb_v4.dat"); 
// for (int i = 0; i < nFrames; ++i) {
// 	filez << fValues[i] << " " << zValues[i] << endl; // Écriture des valeurs de fréquence et de deplacement de la membrane dans le fichier
// }

// ofstream filephasez("dphase_frequence_withmemb_v4.dat");
// for (int i = 0; i < nFrames; ++i) {
// 	filephasez << fValues[i] << " " << dphase[i] << endl; // Écriture des valeurs de fréquence et de phase dans le fichier
// }

// ------------------------------  modes couplés ------------------------------

matrix<complex> Id = eye(AtotB.n);
matrix<complex> nId = -Id;
matrix<complex> OId = 1e-9*Id;

matrix<complex> M1 = [[Id, 0], [0, BtotB]]; // Manually construct block diagonal matrix
matrix<complex> M2 = [[OId, nId], [AtotB, CtotB]]; // Ensure proper block matrix construction
cout << M1.n << " " << M1.m << endl;
cout << M2.n << " " << M2.m << endl;

set(M1, solver = sparsesolver);
set(M2, solver = sparsesolver);

complex[int] ev(2*nev); // to store the nev eigenvalue
complex[int, int] eV(M1.n, 2*nev); // to store the eigenvectors

EigenValue(M2, M1, value = ev, rawvector = eV, tol = 1e-30, ncv = 0, driver = 2);

real[int] Fp(nev);
int k = 0;

for (int ni = 1; ni < 2*nev; ni++) {
	if (real(1i*ev[ni])/tau > 0){
		cout << "omega_m_ac_hp " << ni+1 << " = " << real(1i*ev[ni])/tau << endl;
		cout << "f_m_ac_hp " << ni+1 << " = " << real(1i*ev[ni])/(tau*2*pi) << endl;
		
		Fp[k]=real(1i*ev[ni])/(tau*2*pi);
		k++;

		Vhac<complex> ptot;
		Vhst<complex> ztot;

		ptot[] = eV(0:Aac.n-1, ni);
		ztot[] = eV(Aac.n:Aac.n+Ast.n-1, ni);

		Vhac<real> ptotreal = real(ptot);
		Vhst<real> ztotreal = real(ztot);

		plot(ptotreal, wait = 1, dim = 2, cmm="M mode CHP "+(ni+1)+" = "+real(1i*ev[ni])/(tau*2*pi), fill = 1, value = 1);
		plot(ztotreal, wait = 1, dim = 3, cmm="A mode CHP "+(ni+1)+" = "+real(1i*ev[ni])/(tau*2*pi), fill = 1, value = 1);
	}
}

ofstream file("FP_P1_N4_withmemb_v4.dat"); // Ouverture du fichier de sortie
for (int i = 0; i < k; ++i) {
	file << Fp[i] << endl; // Écriture des valeurs de fréquence dans le fichier
}
